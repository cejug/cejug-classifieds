<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="deploy" name="cejug-classifieds-server">
    <property file="build.properties" />
    <property environment="env" />
    <property name="project.lib" value="${basedir}/lib" />
    <property name="build.home" value="${basedir}/build" />
    <property name="build.ear.home" value="${build.home}/ear" />
    <property name="quality.home" value="${build.home}/quality" />
    <property name="build.classes.home" value="${build.home}/classes" />
    <property name="domain" value="domain1" />

    <path id="project.classpath">
        <fileset dir="${env.AS_HOME}/lib/">
            <include name="javaee.jar" />
            <include name="appserv-ws.jar" />
        </fileset>
        <fileset dir="${project.lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" description="http://java.sun.com/webservices/docs/1.6/jaxb/xjc.html">
        <classpath refid="project.classpath" />
    </taskdef>
    <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport" description="https://jax-ws.dev.java.net/jax-ws-ea3/docs/wsimport.html">
        <classpath refid="project.classpath" />
    </taskdef>
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" description="http://findbugs.sourceforge.net/manual/anttask.html">
        <classpath refid="project.classpath" />
    </taskdef>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" description="http://pmd.sourceforge.net/ant-task.html">
        <classpath refid="project.classpath" />
    </taskdef>

    <target name="findbugs">
        <findbugs home="${project.lib}/ext/findbugs" output="xml:withMessages" outputFile="${quality.home}/findbugs.xml" failOnError="true" effort="max">
            <auxClasspath refid="project.classpath" />
            <sourcePath path="${basedir}/src" />
            <class location="${basedir}/build/classes" />
        </findbugs>
    </target>

    <target name="setup">
        <delete dir="${build.classes.home}" includeEmptyDirs="true" />
        <delete dir="${build.ear.home}" includeEmptyDirs="true" />
        <delete dir="${generated.dir}" includeEmptyDirs="true" />
        <mkdir dir="${build.classes.home}" />
        <mkdir dir="${build.ear.home}" />
        <mkdir dir="${build.ear.home}/lib" />
        <mkdir dir="${generated.dir}" />
    </target>

    <target name="build-server-wsdl">
        <wsimport debug="true" verbose="${verbose}" keep="true" extension="false" destdir="${generated.dir}" wsdl="${service.admin.wsdl}" wsdllocation="${service.admin.wsdllocation}">
            <produces dir="${generated.dir}" includes="${generated.dir}/**/*.java" />
            <xjcarg value="-Xcollection-setter-injector" />
        </wsimport>
        <wsimport debug="true" verbose="${verbose}" keep="true" extension="false" destdir="${generated.dir}" wsdl="${service.business.wsdl}" wsdllocation="${service.business.wsdllocation}">
            <produces dir="${generated.dir}" includes="${generated.dir}/**/*.java" />
            <xjcarg value="-Xcollection-setter-injector" />
        </wsimport>
        <javac fork="true" srcdir="${basedir}" destdir="${build.classes.home}" includes="${generated.dir}/**/**,src/**/**" debug="${compile.debug}" debuglevel="lines,vars,source">
            <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="create-war">
        <war warfile="${build.ear.home}/${ant.project.name}.war" webxml="${basedir}/conf/war/WEB-INF/web.xml">
            <webinf dir="${basedir}/conf/war/WEB-INF" includes="**/**" />
            <zipfileset dir="${basedir}/conf/war/" includes="**/**" excludes="**/WEB-INF/**/**" />
            <classes dir="${build.classes.home}" includes="**/java/dev/cejug/classifieds/server/welcome/**/**" />
        </war>
    </target>

    <target name="help">
        <echo message="server:             Builds the service endpoint EJB-Module" />
        <echo message="deploy:             Deploy the EAR file to the Glassfish autodeploy folder" />
        <echo message="run.tests:   Runs the run.tests against the delpoyied service" />
        <echo message="" />

        <echo message=" >> ATTENTION >>    ${AS_HOME} should be well configured (your system points to" />
        <echo message=" >> ATTENTION >>    in your system, AS_HOME = ${AS_HOME}" />
        <echo message=" >> ATTENTION >>    Be sure to have GLASSFISH properly installed" />
        <echo message=" >> ATTENTION >>    GLASSFISH:  https://glassfish.dev.java.net/" />
        <echo message="" />
        <echo message="Thanks for testing Cejug-Classifieds. Any feedback? dev@cejug-classifieds.dev.java.net" />
    </target>

    <target name="server" depends="setup,compile.resources.schema">
        <antcall target="build-server-wsdl" />
        <antcall target="create-war" />
        <antcall target="compile.tests" />
    </target>

    <target name="full.build">
        <antcall target="server" />
        <waitfor maxwait="3000" maxwaitunit="millisecond" checkevery="500">
            <http url="${run.tests.wsdllocation}" />
        </waitfor>
        <!--sleep seconds="10" /-->
        <antcall target="run.tests" />
    </target>

    <target name="compile.resources.schema">
        <echo message="Compiling the Classifieds-Server Config Schema..." />
        <xjc schema="${jaxb.config.xsd}" removeOldOutput="no" readonly="yes" stackSize="2mb" extension="true" classpath="${project.classpath}" destdir="${generated.dir}" package="${jaxb.config.package}">
            <produces dir="${generated.dir}" includes="${jaxb.config.package}/**/*.java" />
        </xjc>
        <xjc schema="${jaxb.i18n.xsd}" removeOldOutput="no" readonly="yes" stackSize="2mb" extension="true" classpath="${project.classpath}" destdir="${generated.dir}" package="${jaxb.i18n.package}">
            <produces dir="${generated.dir}" includes="${jaxb.i18n.package}/**/*.java" />
        </xjc>
        <javac srcdir="${basedir}" destdir="${build.classes.home}" includes="${jaxb.config.dir}/**/**" debug="${compile.debug}" debuglevel="lines,vars,source" source="1.6" />

        <!--jar destfile="lib/footprint-config.jar" basedir="${generated.dir}" />
		<delete dir="${generated.dir}" /-->
    </target>

    <target name="compile.i18.nkeys">
        <echo message="Compiling the I18N keys XML Schema..." />
        <mkdir dir="${jaxb.classes.dir}" />
        <mkdir dir="${generated.dir}" />
        <xjc schema="${i18n.schema}" extension="true" classpath="${build.dir.classes}" target="${generated.dir}" package="${jaxb.bindingclasses.package}">
            <produces dir="${jaxb.classes.dir}" includes="**/*.java" />
        </xjc>
        <javac srcdir="${generated.dir}" destdir="${generated.dir}" debug="${compile.debug}" debuglevel="lines,vars,source" source="1.6" />
        <jar destfile="lib/footprint-i18nkeys.jar" basedir="${generated.dir}" excludes="**/*.java" />
        <delete dir="${generated.dir}" />
    </target>



    <!-- Package the persistence entities -->
    <target name="pack-ejb-entities">
        <jar jarfile="${build.ear.home}/lib/${ant.project.name}-entities.jar">
            <manifest>
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}" />
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="Cejug-Classifieds" />
                <attribute name="Implementation-Title" value="J2EE EJB-Module + SOAP 1.2 WS" />
                <attribute name="Implementation-Version" value="SNAPSHOT" />
            </manifest>

            <fileset dir="${build.classes.home}" casesensitive="yes">
                <include name="net/java/dev/cejug/classifieds/server/ejb3/entity/**/**" />
                <exclude name="test/**" />
            </fileset>
            <fileset dir="${resources.folder}" casesensitive="yes">
                <include name="**/i18n/**" />
            </fileset>
            <metainf dir="${basedir}/conf/ejb/META-INF">
                <include name="**/**" />
                <exclude name="wsdl/**" />
            </metainf>
        </jar>
    </target>

    <!-- Package the persistence entities -->
    <target name="pack-ejb-interfaces">
        <jar jarfile="${build.ear.home}/lib/${ant.project.name}-ejb-interfaces.jar">
            <manifest>
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}" />
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="Cejug-Classifieds" />
                <attribute name="Implementation-Title" value="J2EE EJB-Module + SOAP 1.2 WS" />
                <attribute name="Implementation-Version" value="SNAPSHOT" />
            </manifest>

            <fileset dir="${build.classes.home}" casesensitive="yes">
                <include name="net/java/dev/cejug/classifieds/server/ejb3/bean/interfaces/**" />
                <exclude name="test/**" />
            </fileset>
        </jar>
    </target>


    <!-- Package the entity classes -->
    <target name="pack-ejb-beans">
        <jar jarfile="${build.ear.home}/${ant.project.name}-ejb.jar">
            <manifest>
                <!-- Who is building this jar? -->
                <attribute name="Built-By" value="${user.name}" />
                <!-- Information about the program itself -->
                <attribute name="Implementation-Vendor" value="Cejug-Classifieds" />
                <attribute name="Implementation-Title" value="J2EE EJB-Module + SOAP 1.2 WS" />
                <attribute name="Implementation-Version" value="SNAPSHOT" />
            </manifest>

            <fileset dir="${build.classes.home}" casesensitive="yes">
                <include name="**/**" />
                <exclude name="test/**,**/entity/**,**/interfaces/**" />

            </fileset>
            <fileset dir="${resources.folder}" casesensitive="yes">
                <include name="**/i18n/**" />
            </fileset>
            <metainf dir="${basedir}/conf/ejb/META-INF">
                <include name="**/**" />
                <exclude name="**/persistence.xml" />
            </metainf>
        </jar>
    </target>

    <target name="package-ear" depends="server, pack-ejb-beans, pack-ejb-interfaces,pack-ejb-entities">
        <jar destfile="${build.ear.home}/${ant.project.name}.ear">
            <fileset dir="${build.ear.home}" includes="*.jar,*.war,**/lib/**" />
        </jar>
    </target>

    <target name="deploy" depends="package-ear">
        <copy file="${build.ear.home}/${ant.project.name}.ear" todir="${env.AS_HOME}/domains/${domain}/autodeploy" />
    </target>

    <target name="compile.tests">
        <javac srcdir="test/integration" destdir="${build.classes.home}">
            <classpath refid="project.classpath" />
            <include name="**/*.java" />
        </javac>
    </target>

    <path id="tests.classpath">
        <pathelement location="${build.classes.home}" />
        <fileset dir="${project.lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>
	<!-- Test -->
    <target name="run.tests" depends="compile.tests">
        <junit fork="yes" haltonfailure="yes" printsummary="no">
            <test name="${test.suite}" />
            <classpath refid="tests.classpath" />
            <formatter type="plain" usefile="false" />
            <jvmarg value="-Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=${log}" />
        </junit>
    </target>

    <!-- Verify source code with PMD -->
    <target name="pmd">
        <!-- where the report will be generated -->
        <mkdir dir="${quality.home}/pmd" />
        <pmd rulesetfiles="${project.lib}/ext/pmd/pmd-rules.xml" shortFilenames="true">
            <formatter type="html" toFile="${quality.home}/pmd/pmd_report.html" />
            <formatter type="xml" toFile="${quality.home}/pmd.xml" />
            <fileset dir="${basedir}/src">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${basedir}/generated">
                <include name="**/*.java" />
            </fileset>
        </pmd>
    </target>

    <target name="validate.xml.documents">
        <xmlvalidate failonerror="yes" lenient="no" warn="yes">
            <fileset dir="${contract.folder}" includes="**/**" />
            <attribute name="http://apache.org/xml/features/nonvalidating/load-dtd-grammar" value="false" />
            <attribute name="http://apache.org/xml/features/validation/dynamic" value="true" />
            <attribute name="http://xml.org/sax/features/validation" value="true" />
            <attribute name="http://apache.org/xml/features/validation/schema" value="true" />
            <attribute name="http://apache.org/xml/features/validation/schema-full-checking" value="true" />
            <attribute name="http://apache.org/xml/features/allow-java-encodings" value="true" />
        </xmlvalidate>

        <!-- http://xerces.apache.org/xerces-j/features.html -->
        <!--schemavalidate failonerror="yes" lenient="no" warn="yes" disabledtd="true" fullchecking="false">
            <fileset dir="${contract.folder}" includes="**/**"/>
        </schemavalidate-->
    </target>
    
    <!-- dbmonster classpath -->
    <path id="dbmonster.classpath">
        <fileset dir="${project.lib}/ext/dbmonster">
            <include name="*.jar"/>
        </fileset>
        <!-- JDBC driver --> 
        <fileset dir="${env.AS_HOME}/javadb/lib">
            <include name="derbyclient.jar"/>
        </fileset>
    </path>

    <!-- Generates random test data using DBMonster (http://dbmonster.kernelpanic.pl/) -->
    <target name="gendb">
        <taskdef name="dbmonster" classname="pl.kernelpanic.dbmonster.ant.DBMonsterTask" classpathref="dbmonster.classpath" />
        <dbmonster
            config="${project.lib}/ext/dbmonster/dbmonster.properties"
            verbose="true"
            schema="${project.lib}/ext/dbmonster/classifieds.xml">
        </dbmonster>
    </target>

    <target name="cpd">
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
            <classpath refid="project.classpath" />
        </taskdef>
        <mkdir dir="${quality.home}/cpd" />

        <cpd minimumTokenCount="20" format="xml" outputFile="${quality.home}/cpd.xml" encoding="UTF-8">
            <fileset dir="${basedir}/src">
                <include name="**/*.java" />
            </fileset>
            <!-- I don't think that it makes sense to check generated code --> 
            <fileset dir="${basedir}/generated">
                <include name="**/*.java" />
            </fileset>
        </cpd>
        <xslt in="${quality.home}/cpd.xml" style="${project.lib}/ext/pmd/cpdhtml.xslt" out="${quality.home}/cpd/cpd.html" />
        <!--delete file="${quality.home}/cpd/cpd.xml" /-->
    </target>
</project>
